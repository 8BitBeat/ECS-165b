Christopher Chan
Brian Oh

HOW TO RUN THE PROGRAM:
	Typing 'make' compiles all relevant files and also calls flex/bison.
	Typing 'make run' runs the executable.
	Typing 'make clean' removes executable file.

All relevant tables and idx files will be generated by our given queries.

Notes about the queries:
-We do not have the JOIN key word (due to this being hw4's parser since we didn't get the hw6 parser until much later)
HOWEVER, with traditional RDBMS like ours, one can JOIN in the WHERE statement (produces the same effects).
	ex: FROM tblONE JOIN tblTWO ON (one = two)

	IS THE SAME AS:

		FROM tblONE, tblTWO WHERE (one = two)  

-Must surround each WHERE clause in parenthesis
	ex: WHERE (BLAH1) and (BLAH2) or (BLAH3)

-CANNOT have AND/OR within parenthesis (this is due to the fact that none of the parsers including the latest revision take account into more complex queries with nested ANDs/ORs surrounded by parenthesis)
	ex: WHERE (BLAH1 and BLAH2) or BLAH3

-Arithmetic WHERE clauses must have appropriate parenthesis
	ex: WHERE (a = (b+c))

-CANNOT have NULLs in insertion


Assignment(Completed Parts):

	2)Implement and support Nested Loop Join, Hash Join, and Index Join
	Optimizer should look at stats and pick the one to use.
	- we have a debug message that shows what type of joins were used based on reason

	3) Can handle large relations (>200K rows/relation)

	4) When a selection is applied to a product, optimizer breaks selection into
	parts and pushes the parts that apply to only one of the relations 
	below the product but above the relation it applies to.
	- when JOINing & projecting, it checks for the relevant parts


Previous Homework Redemption:

	Christopher Chan (99800560), Brian Oh (997507852): 

	Would like to receive back (full credit - 5 + previous extra credit) on HW3 and HW4 as our final can: 
	HW3:
		-can create .tbl files
		-can insert into .tbl files
		-can fetch rows

	HW4:
		-uses parse tree and supports create, insert, and select...from...where
		-uses iterator concept to traverse tree and such
		-also uses rewrite rules
		-supports  the following operators in expressions	 = > < <> + - * / AND 
		-respects the output column header specification

	All of which can be tested with the sample queries below

Extra Credit:
	Table of error messages your program can generate. Scoring will be based on how meaningful and how comprehensive the error messages are.
	- our database generates error messages based on the type of invalid input.


create table coupe (cmake primary key, cmodel key, cyear key, cmpg);
insert into coupe values ('Toyota', 'GT86', 2013, 27);
insert into coupe values ('Subaru', 'BRZ', 2013, 27);
insert into coupe values ('Nissan', '370Z', 2009, 25);
insert into coupe values ('Toyota', 'Celica', 2003, 21);
insert into coupe values ('Nissan', '350Z', 2004, 20);
insert into coupe values ('Honda', 'Civic', 2010, 31);
insert into coupe values ('Honda', 'Accord', 2014, 30);
insert into coupe values ('Toyota', 'TC', 2016, 29);

create table sedan (smake primary key, smodel key, syear, smpg);
insert into sedan values ('Toyota', 'Camry', 2013, 27);
insert into sedan values ('Subaru', 'WRX', 2013, 27);
insert into sedan values ('Nissan', 'Sentra', 2009, 25);
insert into sedan values ('Toyota', 'Corolla', 2003, 21);
insert into sedan values ('Nissan', 'Altima', 2004, 20);
insert into sedan values ('Honda', 'Civic', 2009, 31);
insert into sedan values ('Honda', 'Accord', 2013, 30);
insert into sedan values ('Toyota', 'Avalon', 2016, 29);

create table ev (emake primary key, emodel key, eyear, empg);
insert into ev values ('Toyota', 'Prius', 2130, 2700000);
insert into ev values ('Tesla', 'S', 2013, 40);
insert into ev values ('Tesla', '3', 2017, 41);
insert into ev values ('Tesla', 'X', 2015, 35);
insert into ev values ('Nissan', 'Leaf', 2005, 34);

select cmake, cmodel from sedan, coupe where (cmake = smake);
select cmake, smodel from sedan, coupe where (cmake = smake);
select cmake, cmpg from coupe where (cmake = 'Toyota') AND (cmpg > 23);
select smake, syear, smpg from coupe, sedan where (cmake = smake) AND (syear > 2003) AND (smpg >= (20 + 5));
select emake, emodel, empg from ev where (emake = 'Toyota') OR (emake = 'Tesla');

//These should return errors
select testing from test;
select cmake from sedan;
